
AVRASM ver. 2.2.7  D:\Kevin's\Uni\SEM 4\Embedded Systems\MAJOR PROJECT NEW\EEET2256_MajorProject_Asm\EEET2256_MajorProject_Asm\main.asm Fri Oct 18 10:03:14 2019

[builtin](2): Including file 'D:/Programs\Atmel Studio 7.0\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m32adef.inc'
[builtin](2): Including file 'D:/Programs\Atmel Studio 7.0\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m32adef.inc'
                                 
                                 
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32A.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32Adef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32A
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32A
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32ADEF_INC_
                                 #define _M32ADEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega32A
                                 #pragma AVRPART ADMIN PART_NAME ATmega32A
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Pulse Width Modulator Enable
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SM2	= 6	; Sleep Mode Select
                                 .equ	SE	= 7	; Sleep Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
                                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write secion read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler bits
                                 .equ	TWPS1	= 1	; TWI Prescaler bits
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x085f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x001a	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x001c	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x0022	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0024	; Analog Comparator
                                 .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M32ADEF_INC_ */
                                 
                                 
                                 ; Created: 6/10/2019 10:55:08 PM
                                 
                                 .def empty				= R0
                                 .def pincval			= R1
                                 .def portcval			= R2
                                 .def digit_first		= R3
                                 .def digit_second		= R4
                                 .def opstorage			= R5
                                 .def decval				= R6
                                 .def ascval				= R7
                                 .def comdigit_second	= R8
                                 .def temp				= R16
                                 .def check				= R17
                                 .def comdigit_first		= R18
                                 .def keypad				= R19
                                 .def counter			= R20
                                 .def maximum			= R21
                                 .def lcdstorage			= R22
                                 
                                 reset:
000000 c010                         rjmp Start
000001 9518                         reti      ; Addr $01
000002 9518                         reti      ; Addr $02
000003 9518                         reti      ; Addr $03
000004 9518                         reti      ; Addr $04
000005 9518                         reti      ; Addr $05
000006 9518                         reti      ; Addr $06        Use 'rjmp myVector'
000007 9518                         reti      ; Addr $07        to define a interrupt vector
000008 9518                         reti      ; Addr $08
000009 9518                         reti      ; Addr $09
00000a 9518                         reti      ; Addr $0A
00000b 9518                         reti      ; Addr $0B        This is just an example
00000c 9518                         reti      ; Addr $0C        Not all MCUs have the same
00000d 9518                         reti      ; Addr $0D        number of interrupt vectors
00000e 9518                         reti      ; Addr $0E
00000f 9518                         reti      ; Addr $0F
000010 9518                         reti      ; Addr $10
                                 
                                 ;***********************************************************
                                 
                                 Start:
                                 	;init stack pointer
000011 e008                      	LDI	TEMP,  HIGH(RAMEND)
000012 bf0e                      	OUT	SPH, TEMP
000013 e50f                      	LDI	TEMP,  LOW(RAMEND)
000014 bf0d                      	OUT	SPL, TEMP
                                 
000015 940e 0089                 	CALL	Init_UART
000017 940e 0099                 	CALL	Init              	;Initialise the system.
                                 
                                 Main:
                                 		;read for first digit
000019 940e 00ba                 		CALL ReadKP_outer
00001b 2f63                      		MOV lcdstorage, keypad
00001c 940e 0095                 		CALL Send_UART
00001e 940e 01dc                 		CALL LongDelay
000020 940e 00ea                 		CALL ConvToDec
000022 926f                      		PUSH decval
000023 940e 018a                 		CALL Errorcheck
                                 
                                 		;read for second digit
000025 940e 00ba                 		CALL ReadKP_outer
000027 2f63                      		MOV lcdstorage, keypad
000028 940e 0095                 		CALL Send_UART
00002a 940e 01dc                 		CALL LongDelay
00002c 940e 00ea                 		CALL ConvToDec
00002e 926f                      		PUSH decval
00002f 940e 018a                 		CALL Errorcheck
                                 
                                 		;combine first two digits
000031 904f                      		POP digit_second
000032 903f                      		POP digit_first
000033 940e 00f2                 		CALL Combine
000035 923f                      		PUSH digit_first ; store the first combined digit
                                 
                                 		;clear some registers to be reused
000036 2433                      		CLR digit_first
000037 2444                      		CLR digit_second
                                 
                                 		;read for third digit
000038 940e 00ba                 		CALL ReadKP_outer
00003a 2f63                      		MOV lcdstorage, keypad
00003b 940e 0095                 		CALL Send_UART
00003d 940e 01dc                 		CALL LongDelay
00003f 940e 00ea                 		CALL ConvToDec
000041 926f                      		PUSH decval
000042 940e 018a                 		CALL Errorcheck
                                 
                                 		;read for fourth digit
000044 940e 00ba                 		CALL ReadKP_outer
000046 2f63                      		MOV lcdstorage, keypad
000047 940e 0095                 		CALL Send_UART
000049 940e 01dc                 		CALL LongDelay
00004b 940e 00ea                 		CALL ConvToDec
00004d 926f                      		PUSH decval
00004e 940e 018a                 		CALL Errorcheck
                                 
                                 		;combine last two digits
000050 904f                      		POP digit_second
000051 903f                      		POP digit_first
000052 940e 00f2                 		CALL Combine
000054 923f                      		PUSH digit_first ; store the first combined digit
                                 		;now the stack should have both of the combined digits!
                                 
000055 908f                      		POP comdigit_second ; take the newest value and store it to this register
000056 912f                      		POP comdigit_first	; take the previous value and store it to this register
                                 		;stack should be empty now
                                 
                                 		;read for fifth digit
000057 940e 00ba                 		CALL ReadKP_outer
000059 2f63                      		MOV lcdstorage, keypad
00005a 940e 0095                 		CALL Send_UART
00005c 940e 01dc                 		CALL LongDelay
00005e 323a                      		CPI keypad, 0x2A ; if asterisk is pressed
00005f f021                      		BREQ Increase
000060 3233                      		CPI keypad, 0x23 ; if hash is pressed
000061 f081                      		BREQ Decrease
000062 323a                      		CPI keypad, 0x2A ; if anything else is pressed
000063 f519                      		BRNE Go_Err
                                 
                                 Increase:
                                 	;read for sixth digit
000064 2733                      	CLR keypad
000065 940e 00ba                 	CALL ReadKP_outer
000067 2f63                      	MOV lcdstorage, keypad
000068 940e 0095                 	CALL Send_UART
00006a 940e 01dc                 	CALL LongDelay
00006c 323a                      	CPI keypad, 0x2A ; if asterisk is pressed
00006d f089                      	BREQ Go_Add
00006e 3233                      	CPI keypad, 0x23 ; if hash is pressed
00006f f099                      	BREQ Go_Mult
000070 323a                      	CPI keypad, 0x2A ; if anything else is pressed
000071 f4a9                      	BRNE Go_Err
                                 
                                 Decrease:
                                 	;read for sixth digit
000072 940e 00ba                 	CALL ReadKP_outer
000074 2f63                      	MOV lcdstorage, keypad
000075 940e 0095                 	CALL Send_UART
000077 940e 01dc                 	CALL LongDelay
000079 3233                      	CPI keypad, 0x23 ; if hash is pressed
00007a f031                      	BREQ Go_Sub
00007b 323a                      	CPI keypad, 0x2A ; if asterisk is pressed
00007c f041                      	BREQ Go_Div
00007d 323a                      	CPI keypad, 0x2A ; if anything else is pressed
00007e f441                      	BRNE Go_Err
                                 	
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;FUNCTIONS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 Go_Add:
00007f 940c 00fe                 	JMP Addition
                                 
                                 Go_Sub:
000081 940c 0102                 	JMP Subtraction
                                 
                                 Go_Mult:
000083 940c 0108                 	JMP Multiplication
                                 
                                 Go_Div:
000085 940c 0113                 	JMP Division
                                 
                                 Go_Err:
000087 940c 018d                 	JMP Error
                                 
                                 Init_UART:
                                 	;set baud rate
000089 2700                      	CLR temp
00008a e40d                      	LDI temp, 0x4D
                                 
00008b bc00                      	OUT UBRRH, empty
00008c b909                      	OUT UBRRL, temp
                                 
                                 	;set UCSR registers
00008d 2700                      	CLR temp
00008e e806                      	LDI temp, (1<<URSEL)|(0<<USBS)|(1 << UCSZ0)|(1 << UCSZ1) ;0x86
00008f bd00                      	OUT UCSRC, temp
                                 
000090 2700                      	CLR temp
000091 e108                      	LDI temp, (1<<RXEN)|(1<<TXEN) ;0x18
000092 b90a                      	OUT UCSRB, temp
000093 2700                      	CLR temp
000094 9508                      	RET
                                 
                                 Send_UART:
                                 	;check if UDRE is set or not
000095 9b5d                      	SBIS UCSRA, UDRE
000096 cffe                      	RJMP Send_UART
                                 	;if set (1), do this
000097 b96c                      	OUT UDR, lcdstorage
000098 9508                      	RET
                                 
                                 Init:
000099 2433                      	CLR digit_first
00009a 2444                      	CLR digit_second
00009b 2722                      	CLR comdigit_first
00009c 2488                      	CLR comdigit_second
00009d 2400                      	CLR empty		
00009e 2700                      	CLR temp
00009f 2744                      	CLR counter
0000a0 2755                      	CLR maximum
0000a1 2733                      	CLR keypad
0000a2 2466                      	CLR decval
0000a3 2477                      	CLR ascval
0000a4 2766                      	CLR lcdstorage
                                 
0000a5 e653                      	LDI maximum, 0x63		; this is 99, which is the max keypad value
0000a6 ef0f                      	LDI temp, 0xFF
0000a7 bb07                      	OUT DDRB, temp			; initialize DDRB
0000a8 e105                      	LDI temp, 0x15
0000a9 bb04                      	OUT DDRC, temp			; initialize DDRC
0000aa ee0a                      	LDI temp, 0xEA
0000ab bb05                      	OUT PORTC, temp			; initialize PORTC
                                 
0000ac e06c                      	LDI lcdstorage, 0x0C	; clear LCD
0000ad 940e 0095                 	CALL Send_UART
0000af 940e 01dc                 	CALL LongDelay
                                 
0000b1 e860                      	LDI lcdstorage, 0x80	; cursor on start
0000b2 940e 0095                 	CALL Send_UART
0000b4 940e 01dc                 	CALL LongDelay
                                 	
0000b6 ba08                      	OUT PORTB, empty
0000b7 940e 01dc                 	CALL LongDelay
0000b9 9508                      	RET
                                 
                                 ReadKP_outer:
0000ba 2711                      			CLR check
0000bb 2733                      			CLR keypad
0000bc 940c 00de                 			JMP While
0000be ef0b                      Content:	LDI temp, 0xFB ; column 1
0000bf bb05                      			OUT PORTC, temp
0000c0 940e 01cb                 			CALL Delay
0000c2 2411                      			CLR pincval
0000c3 2422                      			CLR portcval
0000c4 b213                      			IN pincval, PINC
0000c5 b225                      			IN portcval, PORTC
0000c6 1412                      			CP pincval, portcval
0000c7 f4c9                      			BRNE ReadKP_inner
                                 
0000c8 ef0e                      			LDI temp, 0xFE ; column 2
0000c9 bb05                      			OUT PORTC, temp
0000ca 940e 01cb                 			CALL Delay
0000cc 2411                      			CLR pincval
0000cd 2422                      			CLR portcval
0000ce b213                      			IN pincval, PINC
0000cf b225                      			IN portcval, PORTC
0000d0 1412                      			CP pincval, portcval
0000d1 f479                      			BRNE ReadKP_inner
                                 
0000d2 ee0f                      			LDI temp, 0xEF ; column 3
0000d3 bb05                      			OUT PORTC, temp
0000d4 940e 01cb                 			CALL Delay
0000d6 2411                      			CLR pincval
0000d7 2422                      			CLR portcval
0000d8 b213                      			IN pincval, PINC
0000d9 b225                      			IN portcval, PORTC
0000da 1412                      			CP pincval, portcval
0000db f429                      			BRNE ReadKP_inner
0000dc 940c 00de                 			JMP While				; jump back to while to see if the condition is true or false
                                 
                                 While:
0000de 3010                      	CPI check, 0x00
0000df f2f1                      	BREQ Content			
0000e0 9508                      	RET
                                 
                                 ReadKP_inner:
0000e1 e0f3                      	LDI ZH, high(Table<<1)
0000e2 ecea                      	LDI ZL, low(Table<<1)
0000e3 0de1                      	ADD ZL, pincval
0000e4 2400                      	CLR empty
0000e5 1df0                      	ADC ZH, empty
0000e6 9134                      	LPM keypad, Z
0000e7 e011                      	LDI check, 0x01
0000e8 940c 00de                 	JMP While
                                 
                                 ConvToDec:
0000ea 2466                      	CLR decval
0000eb e0f4                      	LDI ZH, high(DecTable<<1)
0000ec ecea                      	LDI ZL, low(DecTable<<1)
0000ed 0fe3                      	ADD ZL, keypad
0000ee 2400                      	CLR empty
0000ef 1df0                      	ADC ZH, empty
0000f0 9064                      	LPM decval, Z
0000f1 9508                      	RET
                                 
                                 Combine:
0000f2 940e 00f6                 	CALL Mult_ten
0000f4 0c34                      	ADD digit_first, digit_second
0000f5 9508                      	RET
                                 
                                 Mult_ten:						; multiply by 10
0000f6 2744                      		CLR counter
0000f7 2455                      		CLR opstorage
0000f8 2c53                      		MOV opstorage, digit_first
0000f9 9543                      Mult:	INC counter
0000fa 0c35                      		ADD digit_first, opstorage
0000fb 3049                      		CPI counter, 0x09
0000fc f7e1                      		BRNE Mult
0000fd 9508                      		RET
                                 
                                 Addition:
0000fe 2744                      	CLR counter
0000ff 0d28                      	ADD comdigit_first, comdigit_second
000100 940e 0125                 	CALL Result
                                 
                                 Subtraction:
000102 2744                      	CLR counter
000103 1928                      	SUB comdigit_first, comdigit_second
000104 3020                      	CPI comdigit_first, 0x00 ; check if lower than 0
000105 f0ec                      	BRLT Go_Neg
000106 940e 0125                 	CALL Result
                                 
                                 Multiplication:
000108 2744                      	CLR counter
000109 2455                      	CLR opstorage
00010a 2e52                      	MOV opstorage, comdigit_first
00010b 9543                      	INC counter
00010c 0d25                      M:	ADD comdigit_first, opstorage
00010d f098                      	BRCS Go_Exceed	; if carry is set, it means value exceeds 255
00010e 9543                      	INC counter
00010f 1548                      	CP counter, comdigit_second
000110 f7d9                      	BRNE M
000111 940e 0125                 	CALL Result
                                 
                                 Division:
000113 2744                      		CLR counter
000114 1928                      D1:		SUB comdigit_first, comdigit_second
000115 3020                      		CPI comdigit_first, 0x00 ; check if lower than 0
000116 f03c                      		BRLT zero
000117 9543                      		INC counter
000118 1528                      		CP comdigit_first, comdigit_second
000119 f008                      		BRLO D2
00011a cff9                      		RJMP D1
00011b 2f24                      D2:		MOV comdigit_first, counter
00011c 940e 0125                 		CALL Result
00011e 2722                      zero:	CLR comdigit_first
00011f 940e 0125                 		CALL Result
                                 
                                 Go_Exceed:
000121 940c 01b3                 	JMP Exceed
                                 
                                 Go_Neg:
000123 940c 01a3                 	JMP Negative
                                 
                                 Result:
000125 302a                      		CPI comdigit_first, 0x0A	; less than 10
000126 f030                      		BRLO Onedig					; means 1 digit
000127 3624                      		CPI comdigit_first, 0x64	; less than 100
000128 f098                      		BRLO Twodig					; means 2 digit
000129 3f2f                      		CPI comdigit_first, 0xFF	; less than 255
00012a f168                      		BRLO Threedig				; means 3 digit
00012b 940c 018d                 		JMP Error					; else, error
                                 
                                 Onedig:							; if result only 1 digit
00012d 2700                      		CLR temp
00012e 932f                      		PUSH comdigit_first
00012f 940e 01dc                 		CALL LongDelay
000131 e36d                      		LDI lcdstorage, 0x3D	; display =
000132 940e 0095                 		CALL Send_UART
000134 910f                      		POP temp
000135 940e 0182                 		CALL ConvToAsc
000137 2d67                      		MOV lcdstorage, ascval	; display the first result digit
000138 940e 0095                 		CALL Send_UART
00013a 940c 01c3                 		JMP Restart		
                                 
                                 Twodig:							; if result is two digits
00013c 2700                      		CLR temp
00013d 2744                      		CLR counter					
00013e 502a                      loop:	SUBI comdigit_first, 0x0A	; simulate divide by 10
00013f 9543                      		INC counter					; store division result
000140 302a                      		CPI comdigit_first, 0x0A	; see if it is lower than 10 yet
000141 f008                      		BRLO next					; if it is, go to next step
000142 cffb                      		RJMP loop					; else, do the subtraction again
000143 932f                      next:	PUSH comdigit_first			; store the remainder into the stack (this will be third digit)
000144 934f                      		PUSH counter				; store the second digit into the stack
000145 940e 01dc                 		CALL LongDelay
000147 e36d                      		LDI lcdstorage, 0x3D	; display =
000148 940e 0095                 		CALL Send_UART
00014a 910f                      		POP temp
00014b 940e 0182                 		CALL ConvToAsc
00014d 2d67                      		MOV lcdstorage, ascval	; display the first result digit
00014e 940e 0095                 		CALL Send_UART
000150 910f                      		POP temp
000151 940e 0182                 		CALL ConvToAsc
000153 2d67                      		MOV lcdstorage, ascval	; display the second result digit
000154 940e 0095                 		CALL Send_UART
000156 940c 01c3                 		JMP Restart
                                 
                                 Threedig:							; if result is three digits
000158 2700                      		CLR temp
000159 2744                      		CLR counter
00015a 502a                      loop1:	SUBI comdigit_first, 0x0A	; simulate divide by 10
00015b 9543                      		INC counter					; store the division result
00015c 302a                      		CPI comdigit_first, 0x0A	; see if it is lower than 10 yet
00015d f008                      		BRLO next1					; if it is, go to next step
00015e cffb                      		RJMP loop1					; else, do the subtraction again
00015f 932f                      next1:	PUSH comdigit_first			; store the remainder into the stack (this will be third digit)
000160 2f24                      		MOV comdigit_first, counter	; move the amount of subtraction that happened (which is division result) to corresponding register
000161 2744                      		CLR counter					; so counter can be reused
000162 502a                      loop2:	SUBI comdigit_first, 0x0A	; simulate divide by 10
000163 9543                      		INC counter					; store division result
000164 302a                      		CPI comdigit_first, 0x0A	; see if it is lower than 10 yet
000165 f008                      		BRLO next2					; if it is, go to next step
000166 cffb                      		RJMP loop2					; else, do the subtraction again
000167 932f                      next2:	PUSH comdigit_first			; store the second remainder into the stack (this will be second digit)
000168 934f                      		PUSH counter				; store the first digit into the stack
000169 940e 01dc                 		CALL LongDelay
00016b e36d                      		LDI lcdstorage, 0x3D	; display =
00016c 940e 0095                 		CALL Send_UART
00016e 910f                      		POP temp
00016f 940e 0182                 		CALL ConvToAsc
000171 2d67                      		MOV lcdstorage, ascval	; display the first result digit
000172 940e 0095                 		CALL Send_UART
000174 910f                      		POP temp
000175 940e 0182                 		CALL ConvToAsc
000177 2d67                      		MOV lcdstorage, ascval	; display the second result digit
000178 940e 0095                 		CALL Send_UART
00017a 910f                      		POP temp
00017b 940e 0182                 		CALL ConvToAsc
00017d 2d67                      		MOV lcdstorage, ascval	; display the second result digit
00017e 940e 0095                 		CALL Send_UART
000180 940c 01c3                 		JMP Restart
                                 
                                 ConvToAsc:
000182 2477                      	CLR ascval
000183 e0f5                      	LDI ZH, high(AscTable<<1)
000184 e0ea                      	LDI ZL, low(AscTable<<1)
000185 0fe0                      	ADD ZL, temp
000186 2400                      	CLR empty
000187 1df0                      	ADC ZH, empty
000188 9074                      	LPM ascval, Z
000189 9508                      	RET
                                 
                                 Errorcheck:
00018a 1556                      	CP maximum, decval ;if greater than 99
00018b f008                      	BRLO Error
00018c 9508                      	RET
                                 
                                 Error:
00018d e261                      	LDI lcdstorage, 0x21	; display exclamation mark
00018e 940e 0095                 	CALL Send_UART
000190 e465                      	LDI lcdstorage, 0x45	; display E
000191 940e 0095                 	CALL Send_UART
000193 e562                      	LDI lcdstorage, 0x52	; display R
000194 940e 0095                 	CALL Send_UART
000196 e562                      	LDI lcdstorage, 0x52	; display R
000197 940e 0095                 	CALL Send_UART
000199 e46f                      	LDI lcdstorage, 0x4F	; display O
00019a 940e 0095                 	CALL Send_UART
00019c e562                      	LDI lcdstorage, 0x52	; display R
00019d 940e 0095                 	CALL Send_UART
00019f e261                      	LDI lcdstorage, 0x21	; display exclamation mark
0001a0 940e 0095                 	CALL Send_UART
0001a2 c020                      	RJMP Restart
                                 
                                 Negative:
0001a3 e261                      	LDI lcdstorage, 0x21	; display exclamation mark
0001a4 940e 0095                 	CALL Send_UART
0001a6 e46e                      	LDI lcdstorage, 0x4E	; display N
0001a7 940e 0095                 	CALL Send_UART
0001a9 e465                      	LDI lcdstorage, 0x45	; display E
0001aa 940e 0095                 	CALL Send_UART
0001ac e467                      	LDI lcdstorage, 0x47	; display G
0001ad 940e 0095                 	CALL Send_UART
0001af e261                      	LDI lcdstorage, 0x21	; display exclamation mark
0001b0 940e 0095                 	CALL Send_UART
0001b2 c010                      	RJMP Restart
                                 
                                 Exceed:
0001b3 e36d                      	LDI lcdstorage, 0x3D	; display =
0001b4 940e 0095                 	CALL Send_UART
0001b6 e362                      	LDI lcdstorage, 0x32	; display 2
0001b7 940e 0095                 	CALL Send_UART
0001b9 e365                      	LDI lcdstorage, 0x35	; display 5
0001ba 940e 0095                 	CALL Send_UART
0001bc e365                      	LDI lcdstorage, 0x35	; display 5
0001bd 940e 0095                 	CALL Send_UART
0001bf e26b                      	LDI lcdstorage, 0x2B	; display +
0001c0 940e 0095                 	CALL Send_UART
0001c2 c000                      	RJMP Restart
                                 	
                                 
                                 Restart:
0001c3 2733                      	CLR keypad
0001c4 940e 00ba                 	CALL ReadKP_outer
0001c6 3233                      	CPI keypad, 0x23
0001c7 f009                      	BREQ Go_Start
0001c8 cffa                      	RJMP Restart
                                 
                                 Go_Start:
0001c9 940c 0011                 	JMP Start
                                 
                                 Delay:							; 256*256*L1 cycle, so around 262144 cycles /  20 ms.
0001cb 930f                               PUSH temp				; save R16 and 17 as we're going to use them
0001cc 934f                               PUSH counter			; as loop counters
0001cd 920f                               PUSH empty				; we'll also use R0 as a zero value
0001ce 2400                               CLR empty
0001cf 2700                               CLR temp				; init inner counter
0001d0 2744                               CLR counter				; and outer counter
0001d1 950a                      L1:      DEC temp				; counts down from 0 to FF to 0
0001d2 1100                      		 CPSE temp, empty		; equal to zero?
0001d3 cffd                      		 RJMP L1				; if not, do it again
0001d4 2700                      		 CLR temp				; reinit inner counter
0001d5 954a                      L2:      DEC counter
0001d6 1140                               CPSE counter, empty	; is it zero yet?
0001d7 cff9                               RJMP L1				; back to inner counter
0001d8 900f                               POP empty				; done, clean up and return
0001d9 914f                               POP counter
0001da 910f                               POP temp
0001db 9508                               RET
                                 
                                 LongDelay:							; should be around 200 ms, so 10 times normal delay.
0001dc 2744                      		CLR counter
0001dd 2400                      		CLR empty
0001de e04b                      		LDI counter, 0x0B			; this is 11
0001df 954a                      LD1:	DEC counter
0001e0 940e 01cb                 		CALL Delay
0001e2 1140                      		CPSE counter, empty
0001e3 cffb                      		RJMP LD1
0001e4 9508                      		RET
                                 		
                                 Table:
0001e5 3f3f
0001e6 3f3f
0001e7 3f3f
0001e8 3f3f
0001e9 3f3f
0001ea 3f3f
0001eb 3f3f
0001ec 3f3f                      	.DB		63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63		; 0 - 15
0001ed 3f3f
0001ee 3f3f
0001ef 3f3f
0001f0 3f3f
0001f1 3f3f
0001f2 3f3f
0001f3 3f3f
0001f4 3f3f                      	.DB		63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63		; 16 - 31
0001f5 3f3f
0001f6 3f3f
0001f7 3f3f
0001f8 3f3f
0001f9 3f3f
0001fa 3f3f
0001fb 3f3f
0001fc 3f3f                      	.DB		63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63		; 32 - 47
0001fd 3f3f
0001fe 3f3f
0001ff 3f3f
000200 3f3f
000201 3f3f
000202 3f3f
000203 3f3f
000204 3f3f                      	.DB		63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63		; 48 - 63
000205 3f3f
000206 3f3f
000207 3f3f
000208 3f3f
000209 3f3f
00020a 3f3f
00020b 3f3f
00020c 3f3f                      	.DB		63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63		; 64 - 79
00020d 3f3f
00020e 3f3f
00020f 3f3f
000210 3f3f
000211 3f3f
000212 3f3f
000213 3f3f
000214 3f3f                      	.DB		63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63		; 80 - 95
000215 3f3f
000216 3f3f
000217 3f3f
000218 3f3f
000219 3f3f
00021a 3f3f
00021b 3f3f
00021c 3f3f                      	.DB		63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63		; 96 - 111
00021d 3f3f
00021e 3f3f
00021f 3f3f
000220 3f3f
000221 3f3f
000222 3f3f
000223 3f3f
000224 3f3f                      	.DB		63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63		; 112 - 127
000225 3f3f
000226 3f3f
000227 3f3f
000228 3f3f
000229 3f3f
00022a 3f3f
00022b 3f3f
00022c 3f3f                      	.DB		63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63		; 128 - 143
00022d 3f3f
00022e 3f3f
00022f 3f3f
000230 3f3f
000231 3f3f
000232 3f3f
000233 3f3f
000234 3f3f                      	.DB		63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63		; 144 - 159
000235 3f3f
000236 3f3f
000237 3f3f
000238 3f3f
000239 3f3f
00023a 3f3f
00023b 3f3f
00023c 363f                      	.DB		63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 54		; 160 - 175
00023d 3f3f
00023e 3f3f
00023f 3f3f
000240 3f3f
000241 3f3f
000242 343f
000243 3f3f
000244 3f35                      	.DB		63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 52, 63, 63, 53, 63		; 176 - 191
000245 3f3f
000246 3f3f
000247 3f3f
000248 3f3f
000249 3f3f
00024a 3f3f
00024b 3f3f
00024c 393f                      	.DB		63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 57		; 192 - 207
00024d 3f3f
00024e 3f3f
00024f 3f3f
000250 3f3f
000251 3f3f
000252 373f
000253 3f3f
000254 3f38                      	.DB		63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 55, 63, 63, 56, 63		; 208 - 223
000255 3f3f
000256 3f3f
000257 3f3f
000258 233f
000259 3f3f
00025a 3f3f
00025b 333f
00025c 3f3f                      	.DB		63, 63, 63, 63, 63, 63, 63, 35, 63, 63, 63, 63, 63, 51, 63, 63		; 224 - 239
00025d 3f3f
00025e 2a3f
00025f 3f3f
000260 3f30
000261 313f
000262 3f3f
000263 3f32
000264 3f3f                      	.DB		63, 63, 63, 42, 63, 63, 48, 63, 63, 49, 63, 63, 50, 63, 63, 63 		; 240 - 255
                                 
                                 DecTable:
000265 6464
000266 6464
000267 6464
000268 6464                      	.DB		100, 100, 100, 100, 100, 100, 100, 100		; 0 - 7
000269 6464
00026a 6464
00026b 6464
00026c 6464                      	.DB		100, 100, 100, 100, 100, 100, 100, 100		; 8 - 15
00026d 6464
00026e 6464
00026f 6464
000270 6464                      	.DB		100, 100, 100, 100, 100, 100, 100, 100		; 16 - 23
000271 6464
000272 6464
000273 6464
000274 6464                      	.DB		100, 100, 100, 100, 100, 100, 100, 100		; 24 - 31
000275 6464
000276 6464
000277 6464
000278 6464                      	.DB		100, 100, 100, 100, 100, 100, 100, 100		; 32 - 39
000279 6464
00027a 6464
00027b 6464
00027c 6464                      	.DB		100, 100, 100, 100, 100, 100, 100, 100		; 40 - 47
00027d 0100
00027e 0302
00027f 0504
000280 0706                      	.DB		0, 1, 2, 3, 4, 5, 6, 7						; 48 - 55
000281 0908
000282 6464
000283 6464
000284 6464                      	.DB		8, 9, 100, 100, 100, 100, 100, 100			; 56 - 63
                                 
                                 AscTable:
000285 3130
000286 3332
000287 3534
000288 3736
000289 3938                      	.DB		48, 49, 50, 51, 52, 53, 54, 55, 56, 57		; 0 - 9
                                 
                                 
                                 
                                 
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32A" register use summary:
x  :   0 y  :   0 z  :   3 r0 :  16 r1 :  10 r2 :   9 r3 :   9 r4 :   5 
r5 :   6 r6 :   8 r7 :   9 r8 :   7 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  43 r17:   3 r18:  26 r19:  23 r20:  31 
r21:   3 r22:  37 r23:   0 r24:   0 r25:   0 r26:   0 r27:   0 r28:   0 
r29:   0 r30:   6 r31:   6 
Registers used: 19 out of 35 (54.3%)

"ATmega32A" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   3 add   :   7 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   1 break :   0 breq  :   8 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 brlt  :   2 brmi  :   0 
brne  :   8 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  84 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  53 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   6 cpc   :   0 
cpi   :  20 cpse  :   3 dec   :   3 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   6 inc   :   7 jmp   :  15 
ld    :   0 ldd   :   0 ldi   :  42 lds   :   0 lpm   :   6 lsl   :   0 
lsr   :   0 mov   :  17 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  14 pop   :  15 
push  :  15 rcall :   0 ret   :  11 reti  :  16 rjmp  :  13 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   0 sbic  :   0 sbis  :   1 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :   0 
sub   :   2 subi  :   3 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 28 out of 113 (24.8%)

"ATmega32A" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000514    970    330   1300   32768   4.0%
[.dseg] 0x000060 0x000060      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
